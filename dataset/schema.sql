-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.changed_files
(
    changedfile_id bigint NOT NULL,
    changetype character varying(1024),
    commit character varying(1024),
    deletions integer,
    file_name character varying(1024),
    path character varying(1024),
    file_type character varying(1024),
    full_file_name character varying(1024),
    insertions integer,
    mode integer,
    range_index integer,
    range_size integer,
    reponame character varying(1024),
    snap_id bigint,
    PRIMARY KEY (changedfile_id)
);

CREATE TABLE IF NOT EXISTS public.cmd_params
(
    run_id bigint NOT NULL,
    cmd_params character varying(1024)
);

CREATE TABLE IF NOT EXISTS public.df_add
(
    add_id bigint NOT NULL,
    current boolean NOT NULL,
    destination character varying(1024),
    source character varying(1024),
    source_destination character varying(1024),
    snap_id bigint,
    PRIMARY KEY (add_id)
);

CREATE TABLE IF NOT EXISTS public.df_arg
(
    arg_id bigint NOT NULL,
    arg character varying(255),
    current boolean NOT NULL,
    snap_id bigint,
    PRIMARY KEY (arg_id)
);

CREATE TABLE IF NOT EXISTS public.df_cmd
(
    snap_id bigint NOT NULL,
    run_params character varying(1024),
    current boolean NOT NULL,
    executable character varying(255),
    PRIMARY KEY (snap_id)
);

CREATE TABLE IF NOT EXISTS public.df_comment
(
    comment_id bigint NOT NULL,
    comment character varying(1024) NOT NULL,
    current boolean NOT NULL,
    instruction character varying(1024),
    snap_id bigint,
    PRIMARY KEY (comment_id)
);

CREATE TABLE IF NOT EXISTS public.df_copy
(
    copy_id bigint NOT NULL,
    current boolean NOT NULL,
    destination character varying(1024),
    source character varying(1024),
    source_destination character varying(1024),
    snap_id bigint,
    PRIMARY KEY (copy_id)
);

CREATE TABLE IF NOT EXISTS public.df_entrypoint
(
    snap_id bigint NOT NULL,
    run_params character varying(1024),
    current boolean NOT NULL,
    executable character varying(255),
    PRIMARY KEY (snap_id)
);

CREATE TABLE IF NOT EXISTS public.df_env
(
    env_id bigint NOT NULL,
    current boolean NOT NULL,
    key character varying(255),
    key_value character varying(1024),
    value character varying(255),
    snap_id bigint,
    PRIMARY KEY (env_id)
);

CREATE TABLE IF NOT EXISTS public.df_expose
(
    expose_id bigint NOT NULL,
    current boolean NOT NULL,
    port bigint,
    snap_id bigint,
    PRIMARY KEY (expose_id)
);

CREATE TABLE IF NOT EXISTS public.df_from
(
    snap_id bigint NOT NULL,
    current boolean NOT NULL,
    digest character varying(255),
    full_name character varying(255),
    imageversionnumber double precision,
    imageversionstring character varying(255),
    imagename character varying(255) NOT NULL,
    PRIMARY KEY (snap_id)
);

CREATE TABLE IF NOT EXISTS public.df_healthcheck
(
    snap_id bigint NOT NULL,
    instruction_params character varying(1024) NOT NULL,
    current boolean NOT NULL,
    instruction character varying(255) NOT NULL,
    options_params character varying(1024) NOT NULL,
    PRIMARY KEY (snap_id)
);

CREATE TABLE IF NOT EXISTS public.df_label
(
    label_id bigint NOT NULL,
    current boolean NOT NULL,
    key character varying(255),
    key_value character varying(1024),
    value character varying(255),
    snap_id bigint,
    PRIMARY KEY (label_id)
);

CREATE TABLE IF NOT EXISTS public.df_maintainer
(
    snap_id bigint NOT NULL,
    current boolean NOT NULL,
    maintainername character varying(1024),
    PRIMARY KEY (snap_id)
);

CREATE TABLE IF NOT EXISTS public.df_onbuild
(
    onbuild_id bigint NOT NULL,
    instruction_params character varying(1024),
    current boolean NOT NULL,
    instruction character varying(255) NOT NULL,
    snap_id bigint,
    PRIMARY KEY (onbuild_id)
);

CREATE TABLE IF NOT EXISTS public.df_run
(
    run_id bigint NOT NULL,
    run_params character varying(2024),
    current boolean NOT NULL,
    executable character varying(255),
    snap_id bigint,
    PRIMARY KEY (run_id)
);

CREATE TABLE IF NOT EXISTS public.df_stopsignal
(
    snap_id bigint NOT NULL,
    current boolean NOT NULL,
    signal character varying(255),
    PRIMARY KEY (snap_id)
);

CREATE TABLE IF NOT EXISTS public.df_user
(
    user_id bigint NOT NULL,
    current boolean NOT NULL,
    username character varying(255),
    snap_id bigint,
    PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS public.df_volume
(
    volume_id bigint NOT NULL,
    current boolean NOT NULL,
    value character varying(1024),
    snap_id bigint,
    PRIMARY KEY (volume_id)
);

CREATE TABLE IF NOT EXISTS public.df_workdir
(
    workdir_id bigint NOT NULL,
    current boolean NOT NULL,
    path character varying(1024),
    snap_id bigint,
    PRIMARY KEY (workdir_id)
);

CREATE TABLE IF NOT EXISTS public.diff
(
    diff_id bigint NOT NULL,
    commit_date bigint NOT NULL,
    del integer NOT NULL,
    diff_state character varying(255) NOT NULL,
    ins integer NOT NULL,
    mod integer NOT NULL,
    PRIMARY KEY (diff_id)
);

CREATE TABLE IF NOT EXISTS public.diff_type
(
    diff_type_id bigint NOT NULL,
    after character varying(255),
    before character varying(255),
    change_type character varying(255) NOT NULL,
    executable character varying(255),
    instruction character varying(255),
    diff_id bigint,
    PRIMARY KEY (diff_type_id)
);

CREATE TABLE IF NOT EXISTS public.dockerfile
(
    dock_id bigint NOT NULL,
    commits integer NOT NULL,
    docker_path character varying(255) NOT NULL,
    created_at bigint NOT NULL,
    first_docker_commit bigint NOT NULL,
    repo_id bigint NOT NULL,
    i_size integer NOT NULL,
    project_project_id bigint,
    PRIMARY KEY (dock_id)
);

CREATE TABLE IF NOT EXISTS public.entrypoints_params
(
    entrypoint_id bigint NOT NULL,
    entrypoints_params character varying(1024)
);

CREATE TABLE IF NOT EXISTS public.failed_projects
(
    project_id bigint NOT NULL,
    project_name character varying(256) NOT NULL,
    PRIMARY KEY (project_id)
);

CREATE TABLE IF NOT EXISTS public.map_diff
(
    map_id bigint NOT NULL,
    project_id bigint NOT NULL,
    old_snap_id bigint NOT NULL,
    new_snap_id bigint NOT NULL,
    diff_id bigint NOT NULL,
    viol_diff_id bigint NOT NULL,
    PRIMARY KEY (map_id)
);

CREATE TABLE IF NOT EXISTS public.project
(
    project_id bigint NOT NULL,
    git_url character varying(1024) NOT NULL,
    created_at bigint NOT NULL,
    i_forks integer NOT NULL,
    giturl character varying(255),
    i_network_count integer NOT NULL,
    i_open_issues integer NOT NULL,
    i_owner_type character varying(255) NOT NULL,
    repo_id bigint NOT NULL,
    repo_path character varying(1024) NOT NULL,
    i_size integer NOT NULL,
    i_stargazers integer NOT NULL,
    i_subscribers integer NOT NULL,
    i_watchers integer NOT NULL,
    PRIMARY KEY (project_id)
);

CREATE TABLE IF NOT EXISTS public.run_params
(
    run_id bigint NOT NULL,
    run_params character varying(2024)
);

CREATE TABLE IF NOT EXISTS public.snap_diff
(
    snap_id bigint NOT NULL,
    diff_id bigint NOT NULL
);

CREATE TABLE IF NOT EXISTS public.snap_viol_diff
(
    diff_id bigint NOT NULL,
    old_snap_id bigint NOT NULL,
    new_snap_id bigint NOT NULL,
    added integer NOT NULL,
    removed integer NOT NULL,
    moved integer NOT NULL,
    valid boolean NOT NULL,
    PRIMARY KEY (diff_id)
);

CREATE TABLE IF NOT EXISTS public.snap_viol_diff_item
(
    item_id bigint NOT NULL,
    diff_id bigint NOT NULL,
    type character varying(16) NOT NULL,
    old_line integer,
    new_line integer,
    rule character varying(64) NOT NULL,
    PRIMARY KEY (item_id)
);

CREATE TABLE IF NOT EXISTS public.snap_violation
(
    viol_id bigint NOT NULL,
    snap_id bigint NOT NULL,
    line integer,
    level character varying(64),
    rule character varying(64),
    PRIMARY KEY (viol_id)
);

CREATE TABLE IF NOT EXISTS public.snap_vuln
(
    id bigint NOT NULL,
    snap_id bigint NOT NULL,
    vuln_id character varying(255),
    namespace character varying(255),
    artifact_name character varying(255),
    artifact_version character varying(255),
    severity character varying(255),
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.snap_vuln_diff
(
    diff_id bigint NOT NULL,
    old_snap_id bigint NOT NULL,
    new_snap_id bigint NOT NULL,
    added integer NOT NULL,
    removed integer NOT NULL,
    PRIMARY KEY (diff_id)
);

CREATE TABLE IF NOT EXISTS public.snap_vuln_diff_item
(
    item_id bigint NOT NULL,
    diff_id bigint NOT NULL,
    type character varying(16) NOT NULL,
    vuln_id bigint NOT NULL,
    PRIMARY KEY (item_id)
);

CREATE TABLE IF NOT EXISTS public.snap_vuln_meta
(
    id bigint NOT NULL,
    snap_id bigint NOT NULL,
    build_success boolean,
    build_time_s numeric,
    error_log character varying(2048),
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.snapshot
(
    snap_id bigint NOT NULL,
    change_type character varying(255),
    commit_date bigint NOT NULL,
    del integer,
    from_date bigint NOT NULL,
    image_is_automated boolean,
    image_is_offical boolean,
    commit_index integer NOT NULL,
    ins integer,
    instructions integer NOT NULL,
    current boolean NOT NULL,
    repo_id bigint NOT NULL,
    star_count integer,
    to_date bigint NOT NULL,
    dock_id bigint,
    PRIMARY KEY (snap_id)
);

CREATE TABLE IF NOT EXISTS public.violated_rules
(
    dock_id bigint NOT NULL,
    violated_rules character varying(255)
);

ALTER TABLE IF EXISTS public.changed_files
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.cmd_params
    ADD FOREIGN KEY (run_id)
    REFERENCES public.df_cmd (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.df_add
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.df_arg
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.df_comment
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.df_copy
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.df_env
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.df_expose
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.df_label
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.df_onbuild
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.df_run
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.df_user
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.df_volume
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.df_workdir
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.diff_type
    ADD FOREIGN KEY (diff_id)
    REFERENCES public.diff (diff_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.dockerfile
    ADD FOREIGN KEY (project_project_id)
    REFERENCES public.project (project_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.entrypoints_params
    ADD FOREIGN KEY (entrypoint_id)
    REFERENCES public.df_entrypoint (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.map_diff
    ADD FOREIGN KEY (diff_id)
    REFERENCES public.diff (diff_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.map_diff
    ADD FOREIGN KEY (new_snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.map_diff
    ADD FOREIGN KEY (old_snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.map_diff
    ADD FOREIGN KEY (project_id)
    REFERENCES public.project (project_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.map_diff
    ADD FOREIGN KEY (viol_diff_id)
    REFERENCES public.snap_viol_diff (diff_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.run_params
    ADD FOREIGN KEY (run_id)
    REFERENCES public.df_run (run_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.snap_diff
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.snap_diff
    ADD FOREIGN KEY (diff_id)
    REFERENCES public.diff (diff_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.snap_viol_diff
    ADD FOREIGN KEY (new_snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.snap_viol_diff
    ADD FOREIGN KEY (old_snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.snap_viol_diff_item
    ADD FOREIGN KEY (diff_id)
    REFERENCES public.snap_viol_diff (diff_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.snap_violation
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.snap_vuln
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.snap_vuln_diff
    ADD FOREIGN KEY (new_snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.snap_vuln_diff
    ADD FOREIGN KEY (old_snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.snap_vuln_diff_item
    ADD FOREIGN KEY (diff_id)
    REFERENCES public.snap_vuln_diff (diff_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.snap_vuln_diff_item
    ADD FOREIGN KEY (vuln_id)
    REFERENCES public.snap_vuln (id)
    NOT VALID;


ALTER TABLE IF EXISTS public.snap_vuln_meta
    ADD FOREIGN KEY (snap_id)
    REFERENCES public.snapshot (snap_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.snapshot
    ADD FOREIGN KEY (dock_id)
    REFERENCES public.dockerfile (dock_id)
    NOT VALID;


ALTER TABLE IF EXISTS public.violated_rules
    ADD FOREIGN KEY (dock_id)
    REFERENCES public.dockerfile (dock_id)
    NOT VALID;

END;